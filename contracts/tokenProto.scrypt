import "util.scrypt";
import "txUtil.scrypt";
import "protoheader.scrypt";

library TokenProto {

  static const int OP_TRANSFER = 1;
  static const int OP_UNLOCK_FROM_CONTRACT = 2;

  static const bytes BURN_ADDRESS = b'0000000000000000000000000000000000000000';
  static const bytes NULL_SENSIBLE_ID = b'000000000000000000000000000000000000000000000000000000000000000000000000';

  // flag is sensible
  static const bytes PROTO_FLAG = ProtoHeader.PROTO_FLAG;
  static const int PROTO_TYPE = 1;
  static const int PROTO_VERSION = 1;
  //static const bytes TOKEN_PROTO_HEADER = b'0100000001000000';
  // <type specific data> + <proto header>
  // <proto header> = <type(4 bytes)> + <'sensible'(8 bytes)>
  //<token type specific data> = <token_name (20 bytes)> + <token_symbol (10 bytes)> + <is_genesis(1 byte)> + <decimailNum(1 byte)> + <address(20 bytes)> + <token amount(8 bytes)> + <genesisHash(20 bytes)> + <rabinPubKeyHashArrayHash(20 bytes)> + <tokenid(20 bytes)>
  static const int TOKEN_ID_LEN = 20;
  static const int SENSIBLE_ID_LEN = 36;
  static const int RABIN_PUBKEY_HASH_ARRAY_HASH_LEN = 20;
  static const int GENESIS_HASH_LEN = 20;
  static const int TOKEN_AMOUNT_LEN = 8;
  static const int TOKEN_ADDRESS_LEN = 20;
  static const int DECIMAL_NUM_LEN = 1;
  static const int GENESIS_FLAG_LEN = 1;
  static const int TOKEN_SYMBOL_LEN = 10;
  static const int TOKEN_NAME_LEN = 20;
  static const int PROTO_TYPE_LEN = 4;
  static const int PROTO_FLAG_LEN = 8;

  static const int SENSIBLE_ID_OFFSET = SENSIBLE_ID_LEN + ProtoHeader.HEADER_LEN;
  static const int RABIN_PUBKEY_HASH_ARRAY_HASH_OFFSET = SENSIBLE_ID_OFFSET + RABIN_PUBKEY_HASH_ARRAY_HASH_LEN;
  static const int GENESIS_HASH_OFFSET = RABIN_PUBKEY_HASH_ARRAY_HASH_OFFSET + GENESIS_HASH_LEN;
  static const int TOKEN_AMOUNT_OFFSET = GENESIS_HASH_OFFSET + TOKEN_AMOUNT_LEN;
  static const int TOKEN_ADDRESS_OFFSET = TOKEN_AMOUNT_OFFSET + TOKEN_ADDRESS_LEN;
  static const int DECIMAL_NUM_OFFSET = TOKEN_ADDRESS_OFFSET + DECIMAL_NUM_LEN;
  static const int GENESIS_FLAG_OFFSET = DECIMAL_NUM_OFFSET + GENESIS_FLAG_LEN;
  static const int TOKEN_SYMBOL_OFFSET = GENESIS_FLAG_OFFSET + TOKEN_SYMBOL_LEN;
  static const int TOKEN_NAME_OFFSET = TOKEN_SYMBOL_OFFSET + TOKEN_NAME_LEN;
  static const int DATA_LEN = TOKEN_NAME_OFFSET;

  static function getProtoData(bytes script, int slen): bytes {
    return script[slen - TokenProto.DATA_LEN: slen];
  }

  static function getDecimalNum(bytes script, int slen): int {
    return Util.fromLEUnsigned(script[slen - TokenProto.DECIMAL_NUM_OFFSET: slen - TokenProto.DECIMAL_NUM_OFFSET + TokenProto.DECIMAL_NUM_LEN]);
  }

  static function getTokenAddress(bytes script, int slen): bytes {
    return script[slen - TokenProto.TOKEN_ADDRESS_OFFSET: slen - TokenProto.TOKEN_ADDRESS_OFFSET + TokenProto.TOKEN_ADDRESS_LEN];
  }

  static function getTokenAmount(bytes script, int slen): int {
    return Util.fromLEUnsigned(script[slen - TokenProto.TOKEN_AMOUNT_OFFSET: slen - TokenProto.TOKEN_AMOUNT_OFFSET + TokenProto.TOKEN_AMOUNT_LEN]);
  }

  static function getNewTokenScript(bytes script, int slen, bytes address, int tokenValue): bytes {
    return script[0: slen - TokenProto.TOKEN_ADDRESS_OFFSET] + address +  Util.toLEUnsigned(tokenValue, 8) + script[slen - TokenProto.GENESIS_HASH_OFFSET: slen];
  }

  static function getNewTokenScriptFromGenesisData(bytes script, int slen, bytes address, int tokenAmount, bytes lpGenesisHash): bytes {
    return script[0: slen - TokenProto.GENESIS_FLAG_OFFSET] + b'00' + script[slen - DECIMAL_NUM_OFFSET: slen - TokenProto.TOKEN_ADDRESS_OFFSET]+ address +  Util.toLEUnsigned(tokenAmount, 8) + lpGenesisHash + script[slen - TokenProto.RABIN_PUBKEY_HASH_ARRAY_HASH_OFFSET: ];
  }

  static function getGenesisHash(bytes script, int slen): bytes {
    return script[slen - GENESIS_HASH_OFFSET: slen - GENESIS_HASH_OFFSET + GENESIS_HASH_LEN];
  }

  static function getRabinPubKeyHashArrayHash(bytes script, int slen): bytes {
    return script[slen - RABIN_PUBKEY_HASH_ARRAY_HASH_OFFSET: slen - RABIN_PUBKEY_HASH_ARRAY_HASH_OFFSET + RABIN_PUBKEY_HASH_ARRAY_HASH_LEN];
  }

  static function getSensibleID(bytes script, int slen): bytes {
    return script[slen - SENSIBLE_ID_OFFSET: slen - SENSIBLE_ID_OFFSET + SENSIBLE_ID_LEN];
  }

  static function getTokenID(bytes script, int slen): bytes {
    return hash160(script[slen - GENESIS_HASH_OFFSET: slen - ProtoHeader.HEADER_LEN]);
  }

  static function getGenesisFlag(bytes script, int slen): int {
    return Util.fromLEUnsigned(script[slen - TokenProto.GENESIS_FLAG_OFFSET: slen - TokenProto.GENESIS_FLAG_OFFSET + TokenProto.GENESIS_FLAG_LEN]);
  }

  static function getTokenSymbol(bytes script, int slen): bytes {
    return script[slen - TokenProto.TOKEN_SYMBOL_OFFSET: slen - TokenProto.TOKEN_SYMBOL_OFFSET + TokenProto.TOKEN_SYMBOL_LEN];
  }

  static function getTokenName(bytes script, int slen): bytes {
    return script[slen - TokenProto.TOKEN_NAME_OFFSET: slen - TokenProto.TOKEN_NAME_OFFSET + TokenProto.TOKEN_NAME_LEN];
  }

  static function getTokenNameAndSymbol(bytes script, int slen): bytes {
    return script[slen - TokenProto.TOKEN_NAME_OFFSET: slen - TokenProto.TOKEN_SYMBOL_OFFSET + TokenProto.TOKEN_SYMBOL_LEN];
  }

  static function checkDataLen(bytes script, int slen): bool {
    return unpack(script[slen - TokenProto.DATA_LEN - 1: slen - TokenProto.DATA_LEN] + b'00') == TokenProto.DATA_LEN;
  }

  static function checkOpReturn(bytes script, int slen): bool {
    return unpack(script[slen - TokenProto.DATA_LEN - 3: slen - TokenProto.DATA_LEN - 2] + b'00') == 0x6a;
  }

  static function getContractCode(bytes script, int slen): bytes {
    // exclude 0x76 + len + data
    return script[0: slen - TokenProto.DATA_LEN - 2];
  }

  static function getDataPart(bytes script, int slen): bytes {
    // exclude 0x76 + len + data
    return script[slen - TokenProto.DATA_LEN - 2: ];
  }

  static function getContractCodeHash(bytes script, int slen): bytes {
    return hash160(TokenProto.getContractCode(script, slen));
  }

  static function getNewGenesisScript(bytes script, int slen, bytes sensibleID): bytes {
    return script[: slen - TokenProto.SENSIBLE_ID_OFFSET] + sensibleID + script[slen - ProtoHeader.HEADER_LEN: ];
  }

  static function checkProtoHeader(bytes script, int slen): bool {
    //return script[slen - ProtoHeader.HEADER_LEN:] == Util.toLEUnsigned(PROTO_VERSION, ProtoHeader.PROTO_VERSION_LEN) + Util.toLEUnsigned(PROTO_TYPE, ProtoHeader.PROTO_TYPE_LEN) + ProtoHeader.PROTO_FLAG;
    return script[slen - ProtoHeader.HEADER_LEN:] == b'0100000001000000' + ProtoHeader.PROTO_FLAG;
  }
}